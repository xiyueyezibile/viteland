{"version":3,"sources":["../../../package.json","../index.ts","../createServer.ts","../plugins/pluginIndexHtml.ts","../config.ts","../plugins/pluginConfig.ts","../ssr/build.ts","../ssr/renderPage.ts"],"names":["CLIENT_ENTRY_PATH","fs","join","PACKAGE_ROOT"],"mappings":"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","sourcesContent":["{\n  \"name\": \"viteland\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"lint\": \"eslint packages --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"lint:lint-staged\": \"lint-staged\",\n    \"prepare\": \"husky install\"\n  },\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": [\n      \"pnpm run lint --fix\",\n      \"npx prettier --write\"\n    ],\n    \"{!(package)*.json,*.code-snippets,.!(browserslist)*rc}\": [\n      \"npx prettier --write--parser json\"\n    ],\n    \"package.json\": [\n      \"npx prettier --write\"\n    ],\n    \"*.{scss,less,styl,html}\": [\n      \"npx prettier --write\"\n    ],\n    \"*.md\": [\n      \"npx prettier --write\"\n    ]\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^19.1.0\",\n    \"@commitlint/config-conventional\": \"^19.1.0\",\n    \"@types/node\": \"^20.11.26\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.2.0\",\n    \"@typescript-eslint/parser\": \"^7.2.0\",\n    \"babel-eslint\": \"^10.1.0\",\n    \"commitlint\": \"^19.1.0\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-plugin-import\": \"^2.29.1\",\n    \"eslint-plugin-prettier\": \"^5.1.3\",\n    \"eslint-plugin-react\": \"^7.34.0\",\n    \"husky\": \"^9.0.11\",\n    \"lerna\": \"^8.1.2\",\n    \"lint-staged\": \"^15.2.2\",\n    \"prettier\": \"^3.2.5\",\n    \"typescript\": \"^5.4.2\"\n  }\n}\n","import { cac } from 'cac';\r\nimport path, { resolve } from 'path';\r\nimport { createServer } from './createServer';\r\nimport { build } from './ssr/build';\r\nimport { PACKAGE_ROOT } from '@viteland/utils';\r\n\r\nconst version = require('../../package.json').version;\r\n\r\nconst cli = cac('viteland').version(version).help();\r\n\r\ncli\r\n  .command('[root]', 'start dev server')\r\n  .alias('dev')\r\n  .action(async (root: string) => {\r\n    // 添加以下逻辑\r\n    const serverRoot = root ? path.resolve(__dirname, '../../../' + root) : process.cwd();\r\n    const create = async () => {\r\n      try {\r\n        const server = await createServer(serverRoot, async () => {\r\n          await server.close();\r\n          await create();\r\n        });\r\n        await server.listen();\r\n        server.printUrls();\r\n      } catch (error) {\r\n        console.log(serverRoot);\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    await create();\r\n  });\r\n\r\ncli.command('build [root]', 'build for production').action(async (root: string) => {\r\n  const serverRoot = root ? path.resolve(__dirname, '../../../' + root) : path.join(PACKAGE_ROOT, 'packages/view');\r\n  try {\r\n    await build(serverRoot);\r\n  } catch (e) {\r\n    console.log(serverRoot);\r\n    console.log(e);\r\n  }\r\n});\r\n\r\ncli.parse();\r\n","import { createServer as createViteDevServer } from 'vite';\r\nimport { pluginIndexHtml } from './plugins/pluginIndexHtml';\r\nimport { resolveConfig } from './config';\r\nimport { pluginConfig } from './plugins/pluginConfig';\r\n/**\r\n * @link https://cn.vitejs.dev/guide/api-javascript.html#createserver\r\n */\r\n// 启动开发服务器\r\nexport async function createServer(root = process.cwd(), restartServer: () => Promise<void>) {\r\n  const config = await resolveConfig(root, 'serve', 'development');\r\n  console.log(config);\r\n  return createViteDevServer({\r\n    plugins: [pluginIndexHtml(), pluginConfig(config, restartServer)],\r\n    root\r\n  });\r\n}\r\n","import { readFile } from 'fs/promises';\r\nimport { Plugin } from 'vite';\r\nimport { CLIENT_ENTRY_PATH, DEFAULT_HTML_PATH } from '@viteland/utils';\r\n/**\r\n * @description 操纵 index.html 钩子\r\n */\r\nexport function pluginIndexHtml(): Plugin {\r\n  return {\r\n    name: 'viteland-html',\r\n    apply: 'serve',\r\n    // 插入入口 script 标签\r\n    transformIndexHtml(html) {\r\n      return {\r\n        html,\r\n        tags: [\r\n          {\r\n            tag: 'script',\r\n            attrs: {\r\n              type: 'module',\r\n              // vite约定 @fs 标识后面为一个绝对路径\r\n              src: `/@fs/${CLIENT_ENTRY_PATH}`\r\n            },\r\n            injectTo: 'body'\r\n          }\r\n        ]\r\n      };\r\n    },\r\n    // 开发服务器钩子\r\n    configureServer(server) {\r\n      return () => {\r\n        // 添加中间件\r\n        server.middlewares.use(async (req, res, next) => {\r\n          // 读取模版\r\n          let html = await readFile(DEFAULT_HTML_PATH, 'utf-8');\r\n\r\n          try {\r\n            // 配置热更新\r\n            html = await server.transformIndexHtml(req.url, html, req.originalUrl);\r\n\r\n            res.statusCode = 200;\r\n            res.setHeader('Content-Type', 'text/html');\r\n            res.end(html);\r\n          } catch (e) {\r\n            return next(e);\r\n          }\r\n        });\r\n      };\r\n    }\r\n  };\r\n}\r\n","import { resolve } from 'path';\r\nimport fs from 'fs-extra';\r\nimport { loadConfigFromFile } from 'vite';\r\nimport { SiteConfig, UserConfig } from './types';\r\n/**\r\n * @description 获取配置文件路径\r\n */\r\nfunction getUserConfigPath(root: string) {\r\n  try {\r\n    // 支持文件类型\r\n    const supportConfigFiles = ['config.ts', 'config.js'];\r\n    // 返回合适的路径\r\n    const configPath = supportConfigFiles.map((file) => resolve(root, file)).find(fs.pathExistsSync);\r\n    return configPath;\r\n  } catch (e) {\r\n    console.error(`Failed to load user config: ${e}`);\r\n    throw e;\r\n  }\r\n}\r\n\r\nexport async function resolveUserConfig(root: string, command: 'serve' | 'build', mode: 'development' | 'production') {\r\n  // 1. 获取配置文件路径\r\n  const configPath = getUserConfigPath(root);\r\n  // 2. 读取配置文件的内容\r\n  const result = await loadConfigFromFile(\r\n    {\r\n      command,\r\n      mode\r\n    },\r\n    configPath,\r\n    root\r\n  );\r\n  if (result) {\r\n    const { config: rawConfig = {} as any } = result;\r\n    // 三种情况:\r\n    // 1. object\r\n    // 2. promise\r\n    // 3. function\r\n    const userConfig: UserConfig = await (typeof rawConfig === 'function' ? rawConfig() : rawConfig);\r\n    return [configPath, userConfig] as const;\r\n  } else {\r\n    return [configPath, {} as UserConfig] as const;\r\n  }\r\n}\r\n/**\r\n * @description 最终配置文件\r\n */\r\nexport function resolveSiteData(userConfig: UserConfig): UserConfig {\r\n  return {\r\n    title: userConfig.title || 'viteland.js',\r\n    description: userConfig.description || 'SSG Framework',\r\n    themeConfig: userConfig.themeConfig || {},\r\n    vite: userConfig.vite || {}\r\n  };\r\n}\r\n\r\nexport async function resolveConfig(root: string, command: 'serve' | 'build', mode: 'development' | 'production') {\r\n  const [configPath, userConfig] = await resolveUserConfig(root, command, mode);\r\n  const siteConfig: SiteConfig = {\r\n    root,\r\n    configPath: configPath,\r\n    siteData: resolveSiteData(userConfig as UserConfig)\r\n  };\r\n  return siteConfig;\r\n}\r\n","import { relative, sep } from 'path';\r\nimport { Plugin, ViteDevServer } from 'vite';\r\nimport { SiteConfig } from '../types';\r\n\r\nconst SITE_DATA_ID = 'viteland:site-data';\r\n/**\r\n * @description 将配置文件注册到虚拟模块方便 view 层访问\r\n */\r\nexport function pluginConfig(config: SiteConfig, restartServer: () => Promise<void>): Plugin {\r\n  return {\r\n    name: 'viteland:config',\r\n    resolveId(id) {\r\n      if (id === SITE_DATA_ID) {\r\n        return '\\0' + SITE_DATA_ID;\r\n      }\r\n    },\r\n    load(id) {\r\n      if (id === '\\0' + SITE_DATA_ID) {\r\n        return `export default ${JSON.stringify(config.siteData)}`;\r\n      }\r\n    },\r\n    // 配置文件变动时重启开发服务器\r\n    async handleHotUpdate(ctx) {\r\n      const customWatchedFiles = [config.configPath];\r\n\r\n      const include = (id: string) => customWatchedFiles.some((file) => id.includes(file));\r\n      // include 为 Unix 分隔符， ctx.file在windows系统下为 windows 分隔符，进行替换进而匹配\r\n      if (include(ctx.file.replace(/\\//g, sep))) {\r\n        console.log(`\\n${relative(config.root, ctx.file)} changed, restarting server...`);\r\n        // 重启 Dev Server\r\n        await restartServer();\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { CLIENT_ENTRY_PATH, PACKAGE_ROOT, SERVER_ENTRY_PATH } from '@viteland/utils';\r\nimport pluginReact from '@vitejs/plugin-react';\r\nimport { InlineConfig, build as viteBuild } from 'vite';\r\nimport { renderPage } from './renderPage';\r\nimport { join } from 'path';\r\n/**\r\n * @link https://cn.vitejs.dev/guide/api-javascript.html#build\r\n */\r\nexport async function build(root: string = process.cwd()) {\r\n  const [clientBundle, serverBundle] = await bundle(root);\r\n  const { render } = await import(join(PACKAGE_ROOT, 'packages/view/.temp/ssr-entry.cjs'));\r\n  await renderPage(render, root, clientBundle);\r\n}\r\n\r\nexport async function bundle(root: string) {\r\n  const resolveViteConfig = (isServer: boolean): InlineConfig => ({\r\n    mode: 'production',\r\n    root,\r\n    // 自动注入 import React from 'react'，避免 React is not defined 的错误\r\n    plugins: [pluginReact()],\r\n    build: {\r\n      ssr: isServer,\r\n      outDir: isServer ? '.temp' : 'build',\r\n      rollupOptions: {\r\n        input: isServer ? SERVER_ENTRY_PATH : CLIENT_ENTRY_PATH,\r\n        output: {\r\n          format: isServer ? 'cjs' : 'esm'\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  console.log(`Building client + server bundles...`);\r\n\r\n  try {\r\n    // Promise.all 并发\r\n    const [clientBundle, serverBundle] = await Promise.all([\r\n      // client build\r\n      viteBuild(resolveViteConfig(false)),\r\n      // server build\r\n      viteBuild(resolveViteConfig(true))\r\n    ]);\r\n    return [clientBundle, serverBundle];\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n","import * as fs from 'fs-extra';\r\nimport { join } from 'path';\r\n\r\nexport async function renderPage(render: () => string, root: string, clientBundle) {\r\n  // 找出所有客户端入口文件chunk\r\n  const clientChunk = clientBundle.output.find((chunk) => chunk.type === 'chunk' && chunk.isEntry);\r\n  console.log(`Rendering page in server side...`);\r\n  // 生产服务端页面\r\n  const appHtml = render();\r\n  const html = `\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\r\n    <title>title</title>\r\n    <meta name=\"description\" content=\"xxx\">\r\n  </head>\r\n  <body>\r\n    <div id=\"root\">${appHtml}</div>\r\n    <script type=\"module\" src=\"/${clientChunk?.fileName}\"></script>\r\n  </body>\r\n</html>`.trim();\r\n  // 生成文件夹\r\n  await fs.ensureDir(join(root, 'build'));\r\n  // 注入页面\r\n  await fs.writeFile(join(root, 'build/index.html'), html);\r\n  await fs.remove(join(root, '.temp'));\r\n}\r\n"]}